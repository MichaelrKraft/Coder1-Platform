/* Precise Hide Settings - Target exact duplicate based on DOM inspection */

/* Method 1: Target common React patterns for settings headers */
/* This targets flex containers with gear icons that aren't our custom section */
div[style*="display: flex"]:has(svg):not(.settings-section):not(.settings-section *) {
    display: none !important;
}

/* Method 2: Target by typical Explorer header structure */
/* First child elements that contain SETTINGS text */
.Explorer > div:first-child:not(.settings-section),
[class*="explorer" i] > div:first-child:not(.settings-section),
[class*="sidebar" i] > div:first-child:not(.settings-section) {
    display: none !important;
}

/* Method 3: Target header-like elements with gear icons */
/* Elements that have SVG children and are styled like headers */
div:has(> svg):not(.settings-section):not(.settings-section *) {
    display: none !important;
}

/* Method 4: Target by font styling patterns */
/* Large text elements that aren't our buttons */
div:not(.settings-section):not(.settings-section *) {
    /* This will be filled in based on inspection */
}

/* Method 5: Target specific class patterns common in React apps */
[class*="header"]:not(.settings-section):not(.settings-section *),
[class*="title"]:not(.settings-section):not(.settings-section *),
[class*="heading"]:not(.settings-section):not(.settings-section *) {
    display: none !important;
}

/* Method 6: Nuclear option for specific positioning */
/* Elements positioned in the upper area of Explorer */
.Explorer div:nth-child(1):not(.settings-section),
.Explorer div:nth-child(2):not(.settings-section) {
    /* Hide first few children that aren't our section */
}

/* Method 7: Target by text content using attribute selectors */
/* This is a fallback approach */
div:not(.settings-section)[aria-label*="settings" i],
div:not(.settings-section)[title*="settings" i] {
    display: none !important;
}

/* Ensure our custom settings always show */
.settings-section,
.settings-section *,
.settings-btn {
    display: flex !important;
    visibility: visible !important;
}